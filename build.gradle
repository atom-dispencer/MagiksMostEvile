buildscript {
    ext.kotlin_version = '1.6.10'
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

def forgeVersion = "40.1.19"
def mcVersion = "1.18.2"
def modVersion = "1.0"
def buildVersion = "0007"
def buildType = "alpha" // alpha, beta, release

group = "genelectrovise.magiksmostevile"
archivesBaseName = "magiksmostevile"
version = "MC-" + mcVersion + "_" + buildType + "-" + modVersion + "-" + buildVersion

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'parchment', version: '2022.05.02-1.18.2'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {

    // Compile
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.22'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version:'1.18.22'

    // General
    minecraft 'net.minecraftforge:forge:' + mcVersion + '-' + forgeVersion
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
    implementation group: 'com.google.inject', name: 'guice', version: '5.0.1'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.6.20'

    // Test
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.12.10'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-commons:1.8.2'
}

// Ensure that sources and javadocs are updated with the project (use scripts/ folder for helper .ps1 scripts)
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Finialise the jar file by reobfuscating it
jar.finalizedBy('reobfJar')

//publish.dependsOn('reobfJar') // Jar must be reobfuscated to publish

// Publish - Publish a new GitHub release
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/genelectrovise/magiksmostevile")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        maven {
            name = "LocalMaven"
            url = uri("file:///${project.projectDir}/mcmodsrepo")
        }
    }

    publications {
        gpr(MavenPublication) {
            groupId = group
            artifactId = archivesBaseName
            version = version

            artifact jar
        }
    }
}



// Configure the test task
test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}











