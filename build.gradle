buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// apply plugin: 'maven' // Removed in Gradle 7
apply plugin: 'java'

def mcVersion = "1.16.5"
def modVersion = "1.0"
def buildVersion = "0007"
def buildType = "alpha" // alpha, beta, release

group = "genelectrovise.magiksmostevile"
archivesBaseName = "magiksmostevile"
version = "MC-" + mcVersion + "_" + buildType + "-" + modVersion + "-" + buildVersion

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {

    // Compile
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.0'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
    implementation group: 'com.google.inject', name: 'guice', version: '5.0.1'

    // Test
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.10.19'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testRuntimeOnly "org.junit.platform:junit-platform-commons:1.8.1"

}

// Ensure that sources and javadocs are updated with the project (use scripts/ folder for helper .ps1 scripts)
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Finialise the jar file by reobfuscating it
jar.finalizedBy('reobfJar')

//publish.dependsOn('reobfJar') // Jar must be reobfuscated to publish

// Publish - Publish a new GitHub release
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/genelectrovise/magiksmostevile")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        maven {
            name = "LocalMaven"
            url = uri("file:///${project.projectDir}/mcmodsrepo")
        }
    }

    publications {
        gpr(MavenPublication) {
            groupId = group
            artifactId = archivesBaseName
            version = version

            artifact jar
        }
    }
}

// Cursegradle - Publish the artifact to curseforge https://www.curseforge.com/minecraft/mc-mods/magiksmostevile/
curseforge {
    project {
        apiKey = project.findProperty("curseforge.key") // This should really be in a gradle.properties file
        id = '391212' // Project description -> 'About Project' sidebar -> Project ID
        changelog = file('changelog.md')
        releaseType = buildType

        mainArtifact(jar) {
            displayName = archivesBaseName + '-' + version
            //relations {
            //requiredDependency 'railcraft' // Railcraft is required
            //embeddedLibrary 'cofhlib' // CoFH Lib is shipped with the artifact
            //optionalDependency 'notenoughitems' // Not Enough Items is an optional addon
            //tool 'worldedit' // World Edit is a compatible tool
            //incompatible 'buildcraft' // BuildCraft is not compatible
            //}
        }
    }
}

// Configure the test task
test {
    useJUnitPlatform()
}











